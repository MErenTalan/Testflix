// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String        @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  watchListIds   String[]      @db.ObjectId
  sessions       Session[]
  accounts       Account[]
  WatchedTill    WatchedTill[]
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refreshToken       String?   @db.String
  accessToken        String?   @db.String
  accessTokenExpires DateTime?
  tokenType          String?
  scope              String?
  idToken            String?
  sessionState       String?
  User               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  videoUrl          String
  thumbnailUrl      String
  genre             String
  durationInSeconds Int
  WatchedTill       WatchedTill[]
}

model WatchedTill {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  movieId     String @db.ObjectId
  watchedTill Int
  User        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie       Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
}
